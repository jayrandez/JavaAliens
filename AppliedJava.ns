Newspeak3
'JavaAliens'
class AppliedJava usingPlatform: platform usingJavaAliens: java = (
(* Toolkits built on the JavaAliens FFI. *)|
	Transcript = platform squeak Transcript.
	Processor = platform squeak Processor.
	List = platform collections List.
	Map = platform collections Map.
	java = java.
|) (
public class JavaProcess clazz: clazz <JavaClass> arg: arg <TaggedObject> = (
(*For building applications which Java can interact with asynchronously. Forks a Smalltalk process which polls a native Java message queue. Rather than calling "static void main(String[] args)", it calls "static void main(NSObject arg)". Java can message the NSObject's bound Newspeak object.*)|
	clazz = clazz.
	arg = arg.
	process
	queue
	theMessaging = Messaging new.
	theRegistry = Registry new.
|) (
class Messaging = (|
|) (
class NSMessage on: anObj <JavaObject> = (
(* Describe the class in this comment. *)|
	obj = anObj castTo: (java JavaClass find: 'org/newspeaklanguage/NSMessage').
|) (
public receiver = (
	| tag |
	tag:: (obj get field: 'tag' sig: 'J') value.
	^reg objectForTag: tag.
)
public selector = (
	^(obj get field: 'selector' sig: 'Ljava/lang/String;') value.
)
) : (
)
dispatch: message <NSMessage> = (
	message receiver perform: (message selector asSymbol).
)
public poll = (
	| result |
	result:: queue call method: 'poll' sig: '()Ljava/lang/Object;' args: {}.
	result isNull ifFalse: [dispatch: (NSMessage on: result)].
)
) : (
)
class Registry = (|
	tags = Map new.
	lastTag
|lastTag:: 0) (
NSObject = (
	^java JavaClass find: 'org/newspeaklanguage/NSObject'.
)
public makeNSObjectFor: obj <TaggedObject> = (
	| tag nsObj |
	tag:: obj tagIn: self.
	tag ifNil: [tag:: tagObject: obj ].
	nsObj:: NSObject construct new: {} sig: '()V'.
	nsObj set field: 'queue' sig: 'Ljava/util/concurrent/ConcurrentLinkedQueue;' to: queue.
	nsObj set field: 'tag' sig: 'J' to: (java JavaPrimitive long: tag).
	^nsObj.
)
nextTag = (
	| tag = lastTag. |
	lastTag:: tag + 1.
	^tag
)
public objectForTag: tag = (
	^tags at: tag ifAbsent: [nil].
)
tagObject: obj <TaggedObject> = (
	| tag = nextTag. |
	obj setTagIn: self tag: tag.
	tags at: tag put: obj.
	^tag.
)
) : (
)
main = (
	| ConcurrentLinkedQueue NSObject |

	ConcurrentLinkedQueue:: java JavaClass find: 'java/util/concurrent/ConcurrentLinkedQueue'.
	queue:: ConcurrentLinkedQueue construct new: {} sig: '()V'.

	clazz call method: 'main' sig: '(Lorg/newspeaklanguage/NSObject;)V' args: {reg makeNSObjectFor: arg}.
	
	[true] whileTrue: [msg poll. Processor yield. ].
)
private msg = (
	^theMessaging.
)
private reg = (
	^theRegistry
)
public start = (
	process:: [ main ] forkAt: 40.
)
public terminate = (
	| myProcess = process. |
	process ifNotNil: [process:: nil. myProcess terminate.].
)
) : (
public fork: clazz <JavaClass> arg: arg <TaggedObject> = (
	| process |
	process:: self clazz: clazz arg: arg.
	process start.
	^process.
)
)
public class TaggedObject = (|
	registryTags = Map new.
|) (
public setTagIn: registry <Registry> tag: i = (
	registryTags at: registry put: i.
)
public tagIn: registry <Registry> = (
	^registryTags at: registry ifAbsent: [nil].
)
) : (
)
) : (
)
