Newspeak3
'JavaAliens'
class JavaAliensForSqueak usingPlatform: platform usingJNI: jni = (
(* Java FFI built using JNI and Newspeak Aliens FFI. *)|
	Transcript = platform squeak Transcript.
	Alien = platform aliens Alien.
	List = platform collections List.
	Map = platform collections Map.
	jni = jni.
	private theRuntime = Runtime new.
	private theAlienHelpers = AlienHelpers new.
	private theJavaAliens = JavaAliens new.
	private theTranslation = Translation new.
|) (
private class AlienHelpers = (
(* Mainly Pointer Alien manipulation. Ideally this will go away. *)||) (
public coerce: arg <JavaAlien> = (
	^arg asAlien.
)
public coerceList: argList <Collection[JavaAlien]> = (
	^argList collect: [:arg | arg asAlien].
)
public cstring: string = (
	^Alien forPointer: (string asAlien address).
)
public isNullPtr: pointerAlien = (
	^pointerAlien address = 0
)
public nullPtr = (
	^Alien forPointer: 0.
)
public safePtr: pointerAlien = (
	^(isNullPtr: pointerAlien) ifTrue: [nil] ifFalse: [pointerAlien]
)
) : (
)
private class JavaAliens = (|
|) (
private class JavaAlien on: alien <Alien> = (|
	private alien = alien.|) (
public asAlien = (
	^alien
)
public asJavaAlien = (
	^self
)
public isJavaAlien = (
	^true
)
public signature = (
	^subclassResponsibility
)
public value = (
	(* Return a Newspeak-friendly value. *)
	^subclassResponsibility.
)
) : (
)
public class JavaArray on: jarray = JavaNonPrimitive on: jarray (|
	cachedLength
|) (
public length = (
	cachedLength ifNil: [cachedLength:: lookupLength].
	^cachedLength.
)
private lookupLength = (
	^(env GetArrayLength: (self asAlien)) unsignedLongAt: 1.
)
public value = (
	^(elementsFrom: 0 to: (length - 1)) collect: [:eachElement | eachElement value].
)
) : (
)
public class JavaBoolean on: jboolean = JavaPrimitive on: jboolean (|
|) (
public signature = (
	^'Z'.
)
public value = (
	^((self asAlien) unsignedByteAt: 1) ~= 0.
)
) : (
)
public class JavaByte on: jbyte = JavaPrimitive on: jbyte (|
|) (
public signature = (
	^'B'.
)
public value = (
	^(self asAlien) signedByteAt: 1.
)
) : (
)
public class JavaChar on: jchar = JavaPrimitive on: jchar (|
|) (
public signature = (
	^'C'.
)
public value = (
	^Character value: ((self asAlien) unsignedShortAt: 1).
)
) : (
)
public class JavaClass on: jclass = JavaNonPrimitive on: jclass (|
	cachedClassmap
	cachedName
|) (
private class CallStaticMethodTypeTranslator = MethodTypeTranslator (
(* Attempts to relay messages through method invokation. *)|
|) (
protected returnSignature: methodSignature = (
	^(methodSignature subStrings: ')') at: 2
)
public translateMethod: staticMethodName args: args = (
	^unimplemented.
)
public translateMethod: staticMethodName argsTypes: argTypes = (
	^unimplemented.
)
public translateMethod: staticMethodName numArgs: numArgs = (
	unimplemented.
)
public translateMethod: staticMethodName sig: sig = (
	| methodID type returnType alienClass |
	methodID:: env GetStaticMethodID: (outer JavaClass asAlien) name: (help cstring: staticMethodName) sig: (help cstring: sig).
	(help isNullPtr: methodID) ifTrue: [^StaticMethodNotFound].

	type:: translateSig: (returnSignature: sig).
	returnType:: type returnType.
	alienClass:: type alienClass.
	^[:args | package: (invokeCallStaticTypeMethod: returnType methodID: methodID args: args) as: alienClass].
)
) : (
)
private class ConstructTranslator = TypeTranslator (||) (
public new: args <List> = (
	unimplemented.
)
public new: args <List> sig: sig = (
	| invocation nativeArgs |
	nativeArgs:: help coerceList: args.
	invocation:: translateNewSig: sig.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value: nativeArgs].
)
public translateNewSig: sig = (
	| methodID type |
	methodID:: env GetMethodID: (outer JavaClass asAlien) name: (help cstring: '<init>') sig: (help cstring: sig).
	(help isNullPtr: methodID) ifTrue: [^MethodNotFound].

	^[:args | package: (invokeNewObject: methodID args: args) as: JavaObject].
)
) : (
)
private class GetStaticFieldTypeTranslator = GetTypeTranslator (|
|) (
public translateField: staticFieldName = (
	unimplemented.
)
public translateField: staticFieldName sig: sig = (
	| fieldID type returnType alienClass |
	fieldID:: env GetStaticFieldID: (outer JavaClass asAlien) name: (help cstring: staticFieldName) sig: (help cstring: sig).
	(help isNullPtr: fieldID) ifTrue: [^StaticFieldNotFound].

	type:: translateSig: sig.
	returnType:: type returnType.
	alienClass:: type alienClass.
	^[package: (invokeGetStaticTypeField: returnType fieldID: fieldID) as: alienClass].
)
) : (
)
private class SetStaticFieldTypeTranslator = SetTypeTranslator (|
|) (
public translateField: staticFieldName = (
	unimplemented.
)
public translateField: staticFieldName sig: sig = (
	| fieldID type returnType alienClass |
	fieldID:: env GetStaticFieldID: (outer JavaClass asAlien) name: (help cstring: staticFieldName) sig: (help cstring: sig).
	(help isNullPtr: fieldID) ifTrue: [^StaticFieldNotFound].

	type:: translateSig: sig.
	returnType:: type returnType.
	alienClass:: type alienClass.
	^[:value | package: (invokeSetStaticTypeField: returnType fieldID: fieldID value: value) as: alienClass].
)
) : (
)
private class StaticTranslator = (|
|) (
) : (
)
public call: staticMethod <String | Method> args: args <Collection> = (
	| inferenceGroup |
	inferenceGroup:: classmap static method: staticMethod.
	inferenceGroup collapse: args executor: staticMethodExecutor.
)
public cast: obj <JavaObject> = (
	(* Directly call method "cast" on this class object, should be valid if obj is null. *)
	| callSignature resultObj |

	(obj instanceOf: self) ifFalse: [^ClassCastError].

	callSignature:: '(Ljava/lang/Object;)Ljava/lang/Object;'.
	resultObj:: javaObject call method: 'cast' sig: callSignature args: {obj}.

	^resultObj.
)
private classmap = (
	cachedClassmap isNil ifTrue: [cachedClassmap:: lookupClassmap].
	^cachedClassmap.
)
invokeCallStaticTypeMethod: returnType methodID: methodID args: args <Collection> = (
	^env CallStaticTypeMethod: returnType clazz: (self asAlien) methodID: methodID withArguments: args.
)
invokeGetStaticTypeField: returnType fieldID: fieldID = (
	^env GetStaticTypeField: returnType clazz: (self asAlien) fieldID: fieldID.
)
invokeNewObject: methodID args: args = (
	^env NewObject: (self asAlien) methodID: methodID withArguments: args.
)
invokeSetStaticTypeField: returnType fieldID: fieldID value: value = (
	^env SetStaticTypeField: returnType clazz: (self asAlien) fieldID: fieldID value: value.
)
public isJavaClass = (
	^true
)
private lookupClassmap = (
	^runtime classmap: name.
)
private lookupName = (
	(* Directly call method "getName" on this class object. *)
	| nameJavaString |
	nameJavaString:: javaObject call method: 'getName' sig: '()Ljava/lang/String;' args: {}.
	^nameJavaString value copyReplaceAll: '.' with: '/' asTokens: false.
)
public  method: staticMethodName  <String> sig: signature <String> = (
	^classmap static method: staticMethodName sig: signature finder: staticMethodFinder.
)
public name = (
	cachedName ifNil: [cachedName:: lookupName].
	^cachedName.
)
private staticMethodExecutor = (
	^[:jniType :methodID :args |
		env CallStaticTypeMethod: jniType 
			clazz: (self asAlien)
			methodID: methodID
			withArguments: (help coerceList: args)
	].
)
private staticMethodFinder = (
	^[:methodName :sig | env GetStaticMethodID: (self asAlien) name: (help cstring: methodName) sig: (help cstring: sig)].
)
public translateSet: fieldName return: return sig: sig = (
	(* Return a block to be invoked with the field value. *)
	| fieldID |
	fieldID:: env GetStaticFieldID: (self asAlien) name: (help cstring: fieldName) sig: (help cstring: sig).
	(help isNullPtr: fieldID) ifTrue: [^StaticFieldNotFound].

	^[:value <JavaAlien> | invokeSetStaticTypeField: (return jniReturnType) fieldID: fieldID value: (value asAlien)].
)
) : (
public find: name <String> = (
	| jclass <Alien> |
	jclass:: env FindClass: (name asAlien address).
	^(help isNullPtr: jclass)
		ifTrue: [FindClassFailed.]
		ifFalse: [JavaClass on: jclass].
)
)
public class JavaDouble on: jdouble = JavaPrimitive on: jdouble (|
|) (
public signature = (
	^'D'.
)
public value = (
	^(self asAlien) doubleAt: 1.
)
) : (
)
public class JavaFloat on: jfloat = JavaPrimitive on: jfloat (|
|) (
public signature = (
	^'F'.
)
public value = (
	^(self asAlien) floatAt: 1.
)
) : (
)
public class JavaInt on: jint = JavaPrimitive on: jint (|
|) (
public signature = (
	^'I'.
)
public value = (
	^(self asAlien) signedLongAt: 1.
)
) : (
)
public class JavaLong on: jlong = JavaPrimitive on: jlong (|
|) (
public signature = (
	^'J'.
)
public value = (
	(* Should be "signedWordAt", per Java, but it is currently crashing, possibly stack frame issue w/ 32-bit arch. *)
	^(self asAlien) unsignedWordAt: 1.
)
) : (
)
private class JavaNonPrimitive on: jobject = JavaAlien on: jobject ((*
Non-Primitive types use a pointer alien, have a class, and can be treated in Java as objects.

In JavaAliens the types JavaArray, JavaClass, and JavaObject define distinct abilities (namely element, static, or instance accessors), with shared abilities inherited from JavaNonPrimitive.
*)|
	cachedObject
	cachedClass
	cachedClassObject
|) (
public isNull = (
	^help isNullPtr: (self asAlien).
)
public javaClass = (
	(* Return a JavaClass corresponding to this non-primitive's class. *)
	cachedClass ifNil: [cachedClass:: lookupClass].
	^cachedClass.
)
public javaClassObject = (
	(* Return a JavaObject for the class object corresponding to this non-primtive's class. *)
	cachedClassObject ifNil: [cachedClassObject:: lookupClassObject].
	^cachedClassObject.
)
public javaObject = (
	(* Return a JavaObject corresponding to this non-primitive. *)
	cachedObject ifNil: [cachedObject:: lookupObject].
	^cachedObject.
)
private lookupClass = (
	^isNull
		ifTrue: [ObjectIsNull]
		ifFalse: [JavaClass on: (env GetObjectClass: (self asAlien))].
)
private lookupClassObject = (
	^JavaObject on: (javaClass asAlien).
)
private lookupObject = (
	^JavaObject on: (self asAlien)
)
) : (
)
public class JavaObject on: jobject <Alien> = JavaNonPrimitive on: jobject (|
	MethodTypeTranslator = translation MethodTypeTranslator.
	GetTypeTranslator = translation GetTypeTranslator.
	SetTypeTranslator = translation SetTypeTranslator.

	callTranslator = CallMethodTypeTranslator new.
	getTranslator = GetFieldTypeTranslator new.
	setTranslator = SetFieldTypeTranslator new.
|) (
private class CallMethodTypeTranslator = MethodTypeTranslator (
(* Attempts to relay messages through method invokation. *)|
|) (
protected returnSignature: methodSignature = (
	^(methodSignature subStrings: ')') at: 2
)
public translateMethod: staticMethodName args: args = (
	^unimplemented.
)
public translateMethod: instanceMethodName argsTypes: argTypes = (
	^unimplemented.
)
public translateMethod: instanceMethodName numArgs: numArgs = (
	unimplemented.
)
public translateMethod: instanceMethodName sig: sig = (
	| methodID type returnType alienClass |
	methodID:: env GetMethodID: (outer JavaObject javaClass asAlien) name: (help cstring: instanceMethodName) sig: (help cstring: sig).
	(help isNullPtr: methodID) ifTrue: [^InstanceMethodNotFound].

	type:: translateSig: (returnSignature: sig).
	returnType:: type returnType.
	alienClass:: type alienClass.
	^[:args | package: (invokeCallTypeMethod: returnType methodID: methodID args: args) as: alienClass].
)
) : (
)
private class GetFieldTypeTranslator = GetTypeTranslator (|
|) (
public translateField: staticFieldName = (
	unimplemented.
)
public translateField: staticFieldName sig: sig = (
	| fieldID type returnType alienClass |
	fieldID:: env GetFieldID: (outer JavaObject javaClass asAlien) name: (help cstring: staticFieldName) sig: (help cstring: sig).
	(help isNullPtr: fieldID) ifTrue: [^FieldNotFound].

	type:: translateSig: sig.
	returnType:: type returnType.
	alienClass:: type alienClass.
	^[package: (invokeGetTypeField: returnType fieldID: fieldID) as: alienClass].
)
) : (
)
private class SetFieldTypeTranslator = SetTypeTranslator (|
|) (
public translateField: staticFieldName = (
	unimplemented.
)
public translateField: staticFieldName sig: sig = (
	| fieldID type returnType alienClass |
	fieldID:: env GetFieldID: (outer JavaObject javaClass asAlien) name: (help cstring: staticFieldName) sig: (help cstring: sig).
	(help isNullPtr: fieldID) ifTrue: [^FieldNotFound].

	type:: translateSig: sig.
	returnType:: type returnType.
	alienClass:: type alienClass.
	^[:value | package: (invokeSetTypeField: returnType fieldID: fieldID value: value) as: alienClass].
)
) : (
)
public call = (
	(* Equivalent to NullPointerException. *)
	isNull ifTrue: [^ObjectIsNull].

	^callTranslator
)
public get = (
	(* Equivalent to NullPointerException. *)
	isNull ifTrue: [^ObjectIsNull].

	^getTranslator
)
public instanceOf: clazz <JavaClass> = (
	| result |
	
	clazz isJavaClass ifFalse: [^NotAJavaClass].

	(* Arguments unchecked after this point. *)
	result:: env IsInstanceOf: (self asAlien) clazz: (clazz asAlien).

	^(result unsignedByteAt: 1) ~= 0.
)
invokeCallTypeMethod: returnType methodID: methodID args: args <Collection> = (
	(* Arguments unchecked after this point. *)
	^env CallTypeMethod: returnType obj: (self asAlien) methodID: methodID withArguments: args.
)
invokeGetTypeField: returnType fieldID: fieldID = (
	(* Arguments unchecked after this point. *)
	^env GetTypeField: returnType obj: (self asAlien) fieldID: fieldID.
)
invokeSetTypeField: returnType fieldID: fieldID value: value = (
	(* Arguments unchecked after this point. *)
	^env SetTypeField: returnType obj: (self asAlien) fieldID: fieldID value: value.
)
public isJavaObject = (
	^true.
)
public set = (
	(* Equivalent to NullPointerException. *)
	isNull ifTrue: [^ObjectIsNull].

	^setTranslator
)
public signature = (
	^'L', (javaClass name), ';'.
)
public synchronized: block <BlockClosure> = (
	| result |

	env MonitorEnter: (self asAlien).
	result:: block value.
	env MonitorExit: (self asAlien).

	^result.
)
public value = (
	(* No Newspeak-friendly value for a JavaObject. *)
	^self.
)
) : (
)
public class JavaObjectArray on: jarray = JavaArray on: jarray (|
	cachedPackager
	cachedElementClass
|) (
public elementAt: index = (
	(index > (length - 1)) ifTrue: [^ArrayIndexOutOfBounds]. 
	^packager value: (env GetObjectArrayElement: (self asAlien) index: index).
)
public elementAt: index put: obj <JavaObject> = (
	(obj instanceOf: elementClass) ifFalse: [^ArrayStoreException].
	(index > (length - 1)) ifTrue: [^ArrayIndexOutOfBounds]. 

	env SetObjectArrayElement: (self asAlien) index: index value: (obj asAlien).
)
public elementClass = (
	cachedElementClass ifNil: [cachedElementClass:: lookupElementClass].
	^cachedElementClass.
)
public elementsFrom: firstIndex to: lastIndex = (
	(lastIndex < firstIndex) ifTrue: [^ArrayIndexesOutOfOrder].
	(lastIndex > (length - 1))  ifTrue: [^ArrayIndexOutOfBounds].

	^(firstIndex to: lastIndex)
		collect: [:i | packager value: (env GetObjectArrayElement: (self asAlien) index: i)].
)
public elementsFrom: firstIndex to: lastIndex put: values <Collection[JavaObject]> = (
	(lastIndex < firstIndex) ifTrue: [^ArrayIndexesOutOfOrder].
	(lastIndex > (length - 1))  ifTrue: [^ArrayIndexOutOfBounds].
	
	(firstIndex to: lastIndex) do: [:i || valueForIndex |
		valueForIndex:: values at: (i - firstIndex + 1).
		env SetObjectArrayElement: (self asAlien) index: i value: (valueForIndex asAlien)
	].
)
private jobjectPackager = (
	^[:result | JavaObject on: result].
)
private jstringPackager = (
	^[:result | JavaString on: result].
)
private lookupElementClass = (
	| jclass |
	^javaClassObject call method: 'getComponentType' sig: '()Ljava/lang/Class;' args: {}.
)
private lookupPackager = (
	^(elementClass name = 'java/lang/String')
		ifTrue: [jstringPackager]
		ifFalse: [jobjectPackager].
)
private packager = (
	cachedPackager ifNil: [cachedPackager:: lookupPackager].
	^cachedPackager.
)
) : (
public class: clazz <JavaClass> length: length = (
	^self class: clazz length: length initialElement: (help nullPtr).
)
public class: clazz <JavaClass> length: length initialElement: initialElement <JavaObject> = (
	| jarray packager |

	jarray:: env NewObjectArray: length elementClass: (clazz asAlien) initialElement: (initialElement asAlien).
	(help isNullPtr: jarray) ifTrue: [^NewObjectArrayFailed].

	^self on: jarray.
)
public class: clazz <JavaClass> with: values <Collection[JavaObject]> = (
	| objectArray |
	objectArray:: self class: clazz length: (values size) initialElement: (help nullPtr).
	objectArray elementsFrom: 0 to: (values size - 1) put: values.
	^objectArray.
)
)
public class JavaPrimitive on: direct <Alien> = JavaAlien on: direct (|
|) (
) : (
public boolean: value <Boolean> = (
	| jboolean = Alien new: 1. integerValue |
	integerValue:: value ifTrue: [1] ifFalse: [0].
	jboolean unsignedByteAt: 1 put: integerValue.
	^self on: jboolean.
)
public byte: value <Integer> = (
	| jbyte = Alien new: 1. |
	jbyte signedByteAt: 1 put: value.
	^self on: jbyte.
)
public char: value <Character | Integer> = (
	| jchar = Alien new: 2. integerValue |
	integerValue:: value isCharacter ifTrue: [value asciiValue] ifFalse: [value].
	jchar unsignedShortAt: 1 put: integerValue.
	^self on: jchar
)
public double: value <Float> = (
	| jdouble = Alien new: 8. |
	jdouble doubleAt: 1 put: value.
	^self on: jdouble.
)
public float: value <Float> = (
	| jfloat = Alien new: 4. |
	jfloat floatAt: 1 put: value.
	^self on: jfloat.
)
public int: value <Integer>  = (
	| jint = Alien new: 4. |
	jint signedLongAt: 1 put: value.
	^self on: jint.
)
public long: value <Integer> = (
	| jlong = Alien new: 8. |
	jlong signedWordAt: 1 put: value.
	^self on: jlong.
)
public short: value <Integer> = (
	| jshort = Alien new: 2. |
	jshort signedShortAt: 1 put: value.
	^self on: jshort.
)
)
public class JavaPrimitiveArray on: jarray = JavaArray on: jarray (|
|) (
public elementAt: index = (
	^Unimplemented.
)
public elementAt: index put: value <JavaPrimitive> = (
	^Unimplemented.
)
public elementsFrom: firstIndex to: lastIndex = (
	^Unimplemented.
)
public elementsFrom: firstIndex to: lastIndex put: values <Collection[JavaPrimitive]> = (
	^Unimplemented.
)
) : (
)
public class JavaShort on: jshort = JavaPrimitive on: jshort (|
|) (
public signature = (
	^'S'.
)
public value = (
	^(self asAlien) signedShortAt: 1.
)
) : (
)
public class JavaString on: jstring <Alien> = JavaObject on: jstring (|
|) (
public signature = (
	^'Ljava/lang/String;'
)
public value = (
	| cstring |
	cstring:: env GetStringUTFChars: (self asAlien) isCopy: (help nullPtr).
	^cstring strcpy.
)
) : (
public from: string <String> = (
	| jstring |
	jstring:: (env NewStringUTF: (help cstring: string)).
	^(jstring address = 0)
		ifTrue: [NewStringUTFFailed.]
		ifFalse: [JavaString on: jstring.]
)
)
) : (
)
private class Runtime = (
(* Encapsulates JVM and access to the classpath. Holds jvm and env pointers required for all interactions with Java. *)|
	public jvm	
	public env
	public running
	public preexisting 
	private classmap = Map new.
|running:: false) (
public classmap: className <String> = (
	^classmap at: className ifAbsentPut: [translation ClassTable new].
)
private createVM: classpath = (
	| options initArgs jvmPtrBuffer envPtrBuffer result success |

	options:: jni JavaVMOption newC.
	options optionString: (('-Djava.class.path=', classpath) asAlien address).
	
	initArgs:: jni JavaVMInitArgs newC.
	initArgs version: (jni VERSION_1_2).
	initArgs nOptions: 1.
	initArgs options: (options address).
	initArgs ignoreUnrecognized = (jni FALSE).

	(* 	envPtr is equivalent to JNIEnv* env;
		*env (i.e. the data pointed to by envPtr is itself the address of the JNINativeInterface struct	*)
	jvmPtrBuffer:: Alien newC: 4.
	envPtrBuffer:: Alien newC: 4.

	result:: jni CreateJavaVM: (jvmPtrBuffer address) p_env: (envPtrBuffer address) vm_args: (initArgs address).

	result = (jni OK)
	ifTrue: [
		jvm:: jni JavaVM withVmPtr: (derefPtrPtr: jvmPtrBuffer).
		env:: jni JNIEnv withEnvPtr: (derefPtrPtr: envPtrBuffer).
	].

	^result = (jni OK)
)
private derefPtrPtr: pointerPointerAlien = (
	^jni derefPtrPtr: pointerPointerAlien
)
private destroyVM = (
	^jvm DestroyJavaVM
)
public init: classpath = (
	loadExistingVM ifTrue: [
		preexisting:: true. 
		running:: true
	] ifFalse: [
		preexisting:: false.
		(createVM: classpath) ifTrue: [
			running:: true
		] ifFalse: [
			running:: false.
			couldNotStartVM.
		]
	]
)
private loadEnvFromVM: jvmInst = (
	| envPtrBuffer result |
	envPtrBuffer:: Alien newC: 4.
	result:: Alien new: 4.

	result:: jvmInst GetEnv: (envPtrBuffer address) version: (jni VERSION_1_2).
	result = (jni OK) ifTrue: [env:: jni JNIEnv withEnvPtr: (derefPtrPtr: envPtrBuffer)].
	^result
)
private loadExistingVM = (
	| jvmPtrBuffer jvmInst nVMsBuffer numVMs result |
	jvmPtrBuffer:: Alien newC: 4.
	nVMsBuffer:: Alien newC: 4.
	
	result:: jni GetCreatedJavaVMs: (jvmPtrBuffer address) bufLen: 1 nVMs: (nVMsBuffer address).
	result = (jni OK) ifFalse: [^false].

	numVMs:: nVMsBuffer unsignedLongAt: 1.
	numVMs = 1 ifFalse: [^false]. (* Would always be 0 or 1 in modern JNI *)

	jvmInst:: jni JavaVM withVmPtr: (derefPtrPtr: jvmPtrBuffer).
	result:: loadEnvFromVM: jvmInst.
	result = (jni OK) ifTrue: [jvm:: jvmInst].
	
	^result = (jni OK)
)
private recreateVM = (
	(* 	THIS MAY NEVER WORK
		JDK-4712793 : JNI : Failure in JNI_CreateJavaVM() after calling DestroyJavaVM()
		http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4712793	*)
	| result |

	result:: loadExistingVM.
	result = (jni OK) ifFalse: [^false].

	result:: destroyVM.
	result = (jni OK) ifFalse: [^false].

	^createVM
)
) : (
)
private class Translation = (|
	JavaObject = javaAliens JavaObject.
	JavaString = javaAliens JavaString.
	JavaClass = javaAliens JavaClass.
	JavaObjectArray = javaAliens JavaObjectArray.
	JavaPrimitiveArray = javaAliens JavaPrimitiveArray.
	JavaBoolean = javaAliens JavaBoolean.
	JavaInt = javaAliens JavaInt.
	JavaDouble = javaAliens JavaDouble.
	JavaLong = javaAliens JavaLong.
	JavaByte = javaAliens JavaByte.
	JavaFloat = javaAliens JavaFloat.
	JavaChar = javaAliens JavaChar.
	JavaShort = javaAliens JavaShort.
|) (
public class ArrayedReturnBuilder carry: leadingSig forwardTo: forward = (|
	forward = forward.
	public signature
	public packager
	public jniReturnType = env ReturnType jobject.
|signature:: leadingSig, '[') (
public array = (
	^ArrayedReturnBuilder carry: signature forwardTo: forward.
)
public boolean = (
	packager:: primitivePackager.
	signature:: signature, 'Z'.
	^forward return: self.
)
public byte = (
	packager:: primitivePackager.
	signature:: signature, 'B'.
	^forward return: self.
)
public char = (
	packager:: primitivePackager.
	signature:: signature, 'C'.
	^forward return: self.
)
public class = (
	packager:: objectPackager.
	signature:: 'Ljava/lang/Class;'.
	^forward return: self.
)
public double = (
	packager:: primitivePackager.
	signature:: signature, 'D'.
	^forward return: self.
)
public float = (
	packager:: primitivePackager.
	signature:: signature, 'F'.
	^forward return: self.
)
public int = (
	packager:: primitivePackager.
	signature:: signature, 'I'.
	^forward return: self.
)
public long = (
	packager:: primitivePackager.
	signature:: signature, 'J'.
	^forward return: self.
)
public object: clazz <JavaClass> = (
	packager:: objectPackager.
	signature:: signature, 'L', (clazz name), ';'.
	^forward return: self.
)
private objectPackager = (
	^[:result | JavaObjectArray on: result].
)
private primitivePackager = (
	^[:result | JavaPrimitiveArray on: result].
)
public short = (
	packager:: primitivePackager.
	signature:: signature, 'S'.
	^forward return: self.
)
public string = (
	packager:: objectPackager.
	signature:: signature, 'Ljava/lang/String;'.
	^forward return: self.
)
) : (
)
public class ClassTable = (|
	staticTable = MethodFieldTable new.
	instanceTable = MethodFieldTable new.
|) (
public instance = (
	^instanceTable.
)
public static = (
	^staticTable.
)
) : (
)
public class GetBuilder translator: translator = (|
	translator = translator.
	returnBuilder
|) (
public field: fieldName = (
	| invokeBlock |
	invokeBlock:: translator translateGet: fieldName return: returnBuilder sig: (returnBuilder signature).
	^invokeBlock value.
)
public return: return = (
	returnBuilder:: return.
	^self.
)
) : (
)
public class GetTypeTranslator = TypeTranslator (|
|) (
public field: fieldName = (
	| invocation |
	invocation:: translateField: fieldName.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value]
)
public field: fieldName sig: sig = (
	| invocation |
	invocation:: translateField: fieldName sig: sig.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value]
)
public translateField: fieldName = (
	subclassResponsibility
)
public translateField: fieldName sig: sig = (
	^subclassResponsibility
)
) : (
)
public class InferenceGroup with: initial = List (|
	returnSignature
	jniType
	packager
	alienClass
|initialAdd: initial) (
public at: signature ifAbsentPut: absentBlock <BlockClosure> = (
	| absentValue |
	self do: [:each | (each signature = signature) ifTrue: [^each]].
	
	absentValue:: absentBlock value.
	self add: absentValue.
	^absentValue.
)
public collapse: args <Collection> executor: exe <BlockClosure> = (
	(* Entry-point to the method/argument type inference & coercion algorithm. *)

	| soleMethod |

	(self size ~= 1) ifTrue: [^Ambiguous].

	soleMethod:: self at: 1.
	packager value: (exe value: jniType value: (soleMethod methodID) value: args).
)
private initialAdd: initial = (
	self add: initial.
	returnSignature:: (initial signature subStrings: ')') at: 2.
	translateSig.
	packager:: [:result | result isNil ifFalse: [alienClass on: result] ifTrue: [nil]].
)
private translateSig = (
	| firstChar = (returnSignature at: 1). |

	firstChar = "V" ifTrue: [jniType: env ReturnType void. alienClass:: nil].
	firstChar = "L" ifTrue: [
		(returnSignature = 'Ljava/lang/String;') ifTrue: [jniType:: env ReturnType jobject. alienClass:: JavaString].
		(returnSignature = 'Ljava/lang/Class;') ifTrue: [jniType:: env ReturnType jobject. alienClass:: JavaClass].
		jniType:: env ReturnType jobject. alienClass:: JavaObject
	].
	firstChar = "[" ifTrue: [ | secondChar = (returnSignature at: 2). |
		((secondChar = "[") or: (secondChar = "L"))
			ifTrue: [jniType:: env ReturnType jobject. alienClass:: JavaObjectArray]
			ifFalse: [jniType:: env ReturnType jobject. alienClass:: JavaPrimitiveArray].
	].
	firstChar = "Z" ifTrue: [jniType:: env ReturnType jboolean. alienClass:: javaAliens JavaBoolean].
	firstChar = "I" ifTrue: [jniType:: env ReturnType jint. alienClass:: javaAliens JavaInt.].
	firstChar = "D" ifTrue: [jniType:: env ReturnType jdouble. alienClass:: javaAliens JavaDouble].
	firstChar = "J" ifTrue: [jniType:: env ReturnType jlong. alienClass:: javaAliens JavaLong].
	firstChar = "B" ifTrue: [jniType:: env ReturnType jbyte. alienClass: javaAliens JavaByte].
	firstChar = "F" ifTrue: [jniType:: env ReturnType jfloat. alienClass: javaAliens JavaFloat].
	firstChar = "C" ifTrue: [jniType:: env ReturnType jchar. alienClass: javaAliens JavaChar].
	firstChar = "S" ifTrue: [jniType:: env ReturnType jshort. alienClass: javaAliens JavaShort].
)
) : (
public defaultCapacity = (
	^5.
)
)
public class MethodBuilder translator: translator = (|
	translator = translator.
	returnBuilder
|) (
public method: methodName = (
	| signature invokeBlock |
	signature:: '()', (returnBuilder signature).
	^method: methodName sig: signature args: {}.
)
public method: methodName args: args <Collection[JavaAlien]> = (
	| signature invokeBlock |
	signature:: (args inject: '(' into: [:left :each | left, (each signature)]), ')', (returnBuilder signature).
	^method: methodName sig: signature args: args.
)
private method: methodName sig: sig args: args = (
	| invokeBlock |
	invokeBlock:: translator translateMethod: methodName return: returnBuilder sig: sig.
	^invokeBlock value: args.
)
public return: return = (
	returnBuilder:: return.
	^self.
)
) : (
)
public class MethodFieldTable = (|
	methodMap = Map new.
	fieldMap = Map new.
|) (
class Method sig: sig id: id = (|
	public signature = sig.
	public methodID = id.
|) (
) : (
)
private findMethod: name sig: sig finder: finder= (
	(* The executor block provides ID lookup for a private/instance method/field within some context. *)
	| methodID |
	methodID:: finder value: name value: sig.
	^Method sig: sig id: methodID.
)
public method: name = (
	(* Return an InferenceGroup with all methods that have the same name, fail if not in map. *)
	^methodMap at: name ifAbsent: [NameNotFound].
)
public method: name sig: sig finder: exe= (
	(* Return an InferenceGroup with just this particular method, and also ensure it is stored in the map. *)
	| method |

	methodMap at: name ifPresent: [:group |
		method:: group at: sig ifAbsentPut: [
			method:: findMethod: name sig: sig finder: exe.
		].
	]
	ifAbsentPut: [
		method:: findMethod: name sig: sig finder: exe.
		InferenceGroup with: method.
	].
	
	^InferenceGroup with: method.
)
) : (
)
public class MethodTypeTranslator = TypeTranslator (|
|) (
public method: methodName = (
	^method: methodName args: (List new).
)
public method: staticMethodName arg: arg = (
	^method: staticMethodName args: (List with: arg).
)
public method: staticMethodName args: args = (
	| invocation nativeArgs |
	nativeArgs:: help coerceList: args.
	invocation:: translateMethod: staticMethodName args: nativeArgs.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value: nativeArgs]
)
public method: staticMethodName sig: sig = (
	^method: staticMethodName sig: sig args: (List new).
)
public method: staticMethodName sig: sig arg: arg = (
	^method: staticMethodName sig: sig args: (List with: arg)
)
public method: staticMethodName sig: sig args: args = (
	| invocation nativeArgs |
	nativeArgs:: help coerceList: args.
	invocation:: translateMethod: staticMethodName sig: sig.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value: nativeArgs]
)
public translateMethod: methodName numArgs: numArgs = (
	subclassResponsibility.
)
public translateMethod: methodName sig: sig = (
	subclassResponsibility
)
) : (
)
public class ReturnBuilder = (|
	forward
	public signature
	public packager
	public jniReturnType
|) (
public array = (
	^ArrayedReturnBuilder carry: '' forwardTo: forward.
)
public boolean = (
	jniReturnType:: env ReturnType jboolean.
	packager:: [:result | JavaByte on: result].
	signature:: 'Z'.
	^forward return: self.
)
public byte = (
	jniReturnType:: env ReturnType jbyte.
	packager:: [:result | JavaByte on: result].
	signature:: 'B'.
	^forward return: self.
)
public char = (
	jniReturnType:: env ReturnType jchar.
	packager:: [:result | JavaChar on: result].
	signature:: 'C'.
	^forward return: self.
)
public class = (
	jniReturnType:: env ReturnType jobject.
	packager:: [:result | JavaClass on: result].
	signature:: 'Ljava/lang/Class;'.
	^forward return: self.
)
public double = (
	jniReturnType:: env ReturnType jdouble.
	packager:: [:result | JavaDouble on: result].
	signature:: 'D'.
	^forward return: self.
)
public float = (
	jniReturnType:: env ReturnType jfloat.
	packager:: [:result | JavaFloat on: result].
	signature:: 'F'.
	^forward return: self.
)
public forwardTo: forwardBuilder = (
	forward:: forwardBuilder.
	^self.
)
public int = (
	jniReturnType:: env ReturnType jint.
	packager:: [:result | JavaInt on: result].
	signature:: 'I'.
	^forward return: self.	
)
public long = (
	jniReturnType:: env ReturnType jlong.
	packager:: [:result | JavaLong on: result].
	signature:: 'J'.
	^forward return: self.
)
public object: clazz <JavaClass> = (
	jniReturnType:: env ReturnType jobject.
	packager:: [:result | JavaObject on: result].
	signature:: 'L', (clazz name), ';'.
	^forward return: self.
)
public short = (
	jniReturnType:: env ReturnType jshort.
	packager:: [:result | JavaShort on: result].
	signature:: 'S'.
	^forward return: self.
)
public string = (
	jniReturnType:: env ReturnType jobject.
	packager:: [:result | JavaString on: result].
	signature:: 'Ljava/lang/String;'.
	^forward return: self.
)
public void = (
	jniReturnType:: env ReturnType void.
	packager:: [:result | nil].
	signature:: signature, 'V'.
	^forward return: self.
)
) : (
)
public class SetBuilder translator: translator = (|
	translator = translator.
	returnBuilder
|) (
public field: fieldName to: value <JavaAlien> = (
	| invokeBlock |
	invokeBlock:: translator translateSet: fieldName return: returnBuilder sig: (returnBuilder signature).
	^invokeBlock value: value.
)
public return: return = (
	returnBuilder:: return.
	^self.
)
) : (
)
public class SetTypeTranslator = TypeTranslator (|
|) (
public field: fieldName sig: sig to: value = (
	| invocation nativeValue |
	nativeValue:: help coerce: value.
	invocation:: translateField: fieldName sig: sig.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value: nativeValue]
)
public field: fieldName to: value = (
	| invocation nativeValue |
	nativeValue:: help coerce: value.
	invocation:: translateField: fieldName.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value: nativeValue]
)
public translateField: fieldName = (
	subclassResponsibility
)
public translateField: fieldName sig: sig = (
	^subclassResponsibility
)
) : (
)
public class TypeTranslator = (|
|) (
class TypeEntry returnType: returnType alienClass: alienClass = (|
	public returnType = returnType.
	public alienClass = alienClass.
|) (
) : (
)
public package: alien <Alien> as: alienClass <JavaAlien class> = (
	^alienClass isNil ifFalse: [alienClass on: alien] ifTrue: [nil].
)
protected translateSig: sig = (
	| firstChar = (sig at: 1). |

	(* This is almost certainly the crux of optimization. *)

	firstChar = "V" ifTrue: [^TypeEntry returnType: (env ReturnType void) alienClass: nil].
	firstChar = "L" ifTrue: [
		(sig = 'Ljava/lang/String;') ifTrue: [^TypeEntry returnType: (env ReturnType jobject) alienClass: JavaString].
		(sig = 'Ljava/lang/Class;') ifTrue: [^TypeEntry returnType: (env ReturnType jobject) alienClass: JavaClass].
		^TypeEntry returnType: (env ReturnType jobject) alienClass: JavaObject
	].
	firstChar = "[" ifTrue: [ | secondChar = (sig at: 2). |
		((secondChar = "[") or: (secondChar = "L"))
			ifTrue: [^TypeEntry returnType: (env ReturnType jobject) alienClass: JavaObjectArray]
			ifFalse: [^TypeEntry returnType: (env ReturnType jobject) alienClass: JavaPrimitiveArray].
	].
	firstChar = "Z" ifTrue: [^TypeEntry returnType: (env ReturnType jboolean) alienClass: javaAliens JavaBoolean].
	firstChar = "I" ifTrue: [^TypeEntry returnType: (env ReturnType jint) alienClass: javaAliens JavaInt].
	firstChar = "D" ifTrue: [^TypeEntry returnType: (env ReturnType jdouble) alienClass: javaAliens JavaDouble].
	firstChar = "J" ifTrue: [^TypeEntry returnType: (env ReturnType jlong) alienClass: javaAliens JavaLong].
	firstChar = "B" ifTrue: [^TypeEntry returnType: (env ReturnType jbyte) alienClass: javaAliens JavaByte].
	firstChar = "F" ifTrue: [^TypeEntry returnType: (env ReturnType jfloat) alienClass: javaAliens JavaFloat].
	firstChar = "C" ifTrue: [^TypeEntry returnType: (env ReturnType jchar) alienClass: javaAliens JavaChar].
	firstChar = "S" ifTrue: [^TypeEntry returnType: (env ReturnType jshort) alienClass: javaAliens JavaShort].
	
	^nil
)
) : (
)
) : (
)
private defaultClasspath = (
	^'.\bin'
)
env = (
	^runtime env
)
protected help = (
	^theAlienHelpers
)
public javaAliens = (
	^theJavaAliens.
)
public loadClasspath: classpath = (
	^loadClasspath: classpath ifAlreadyLoaded: [self]
)
public loadClasspath: classpath ifAlreadyLoaded: exec = (
	runtime running 
		ifFalse: [
			loadRuntime: classpath.
			theRuntime preexisting ifTrue: [^exec value].
		]
		ifTrue: [^exec value.].
)
private loadRuntime: classpath = (
	runtime init: classpath.
	runtime running ifFalse: [CouldNotLoadRuntime].
)
protected runtime = (
	^theRuntime.
)
protected translation = (
	^theTranslation
)
) : (
)
