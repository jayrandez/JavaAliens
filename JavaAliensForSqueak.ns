Newspeak3
'JavaAliens'
class JavaAliensForSqueak usingPlatform: platform usingJNILibrary: jni = (
(* Java FFI built using JNI and Newspeak Aliens FFI. *)|
	Alien = platform aliens Alien.
	List = platform collections List.
	jni = jni.
	private theRuntime
	private theJavaAliens
|) (
private class AlienHelpers = (
(* Mainly Pointer Alien manipulation. Ideally this will go away. *)||) (
) : (
public coerce: arg <JavaAlien> = (
	^arg asAlien.
)
public coerceList: argList <Collection[JavaAlien]> = (
	^argList collect: [:arg | arg asAlien].
)
public cstring: string = (
	^Alien forPointer: (string asAlien address).
)
public isNullPtr: pointerAlien = (
	^pointerAlien address = 0
)
public nullPtr = (
	^Alien forPointer: 0.
)
public safePtr: pointerAlien = (
	^(isNullPtr: pointerAlien) ifTrue: [nil] ifFalse: [pointerAlien]
)
)
class GetFieldTypeTranslator = TypeTranslator (|
|) (
public field: fieldName = (
	| invocation |
	invocation:: translateField: fieldName.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value]
)
public field: fieldName sig: sig = (
	| invocation |
	invocation:: translateField: fieldName sig: sig.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value]
)
public translateField: fieldName = (
	subclassResponsibility
)
public translateField: fieldName sig: sig = (
	^subclassResponsibility
)
) : (
)
private class JavaAliens usingJNIEnv: env = (
(* All JavaAlien instances have access to a JNIEnv library through this module. *)|
	env = env.
|) (
private class JavaAlien on: alien <Alien> = (|
	private alien = alien.|) (
public asAlien = (
	^alien
)
public asJavaAlien = (
	^self
)
) : (
)
public class JavaArray on: jarray <Alien> = JavaAlien on: jarray (|
|) (
public getElement: index = (
	(* Currently assuming the object is a String. *)
	| jobject |
	jobject:: env GetObjectArrayElement: (self asAlien) index: index.
	^(help isNullPtr: jobject)
		ifTrue: [nil]
		ifFalse: [String jstring: jobject].
)
public setElements: values = (
	| index |
	index:: 0.
	values do: [:eachValue |
		| valuePointer |
		valuePointer:: eachValue asAlien.
		env SetObjectArrayElement: (self asAlien) index: index value: valuePointer.
		index:: index + 1
	]
)
) : (
public emptyOf: elementClass = (
	^self of: elementClass size: 0
)
public of: elementClass size: size = (
	| jarray <Alien> |
	jarray:: env NewObjectArray: size elementClass: (elementClass asAlien) initialElement: help nullPtr.
	^(jarray address = 0) ifFalse: [JavaArray on: jarray] ifTrue: [NewObjectArrayFailed.]
)
public of: elementClass values: values = (
	| instance <JavaArray> |
	instance:: self of: elementClass size: (values size).
	instance setElements: values.
	^instance.
)
)
public class JavaClass on: jclass = JavaAlien on: jclass (|
	callTranslator = CallStaticMethodTypeTranslator new.
	getTranslator = GetStaticFieldTypeTranslator new.
	setTranslator = SetStaticFieldTypeTranslator new.
	constructTranslator = ConstructTranslator new.
|) (
private class CallStaticMethodTypeTranslator = MethodTypeTranslator (
(* Attempts to relay messages through method invokation. *)|
|) (
protected returnSignature: methodSignature = (
	^(methodSignature subStrings: ')') at: 2
)
public translateMethod: staticMethodName args: args = (
	^unimplemented.
)
public translateMethod: staticMethodName argsTypes: argTypes = (
	^unimplemented.
)
public translateMethod: staticMethodName numArgs: numArgs = (
	unimplemented.
)
public translateMethod: staticMethodName sig: sig = (
	| methodID type |
	methodID:: env GetStaticMethodID: (outer JavaClass asAlien) name: (help cstring: staticMethodName) sig: (help cstring: sig).
	(help isNullPtr: methodID) ifTrue: [^StaticMethodNotFound].

	type:: returnType: (returnSignature: sig).
	^[:args | invokeCallStaticTypeMethod: type methodID: methodID args: args].
	)
) : (
)
private class ConstructTranslator = (||) (
public new: args <List> = (
	unimplemented.
)
public new: args <List> sig: sig = (
	| invocation nativeArgs |
	nativeArgs:: help coerceList: args.
	invocation:: translateNewSig: sig.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value: nativeArgs].
)
public translateNewSig: sig = (
	| methodID type |
	methodID:: env GetMethodID: (outer JavaClass asAlien) name: (help cstring: '<init>') sig: (help cstring: sig).
	(help isNullPtr: methodID) ifTrue: [^MethodNotFound].

	^[:args | invokeNewObject: methodID args: args].
)
) : (
)
private class GetStaticFieldTypeTranslator = GetFieldTypeTranslator (|
|) (
public translateField: staticFieldName = (
	unimplemented.
)
public translateField: staticFieldName sig: sig = (
	| fieldID type |
	fieldID:: env GetStaticFieldID: (outer JavaClass asAlien) name: (help cstring: staticFieldName) sig: (help cstring: sig).
	(help isNullPtr: fieldID) ifTrue: [^StaticFieldNotFound].

	type:: returnType: sig.
	^[invokeGetStaticTypeField: type fieldID: fieldID].
)
) : (
)
private class SetStaticFieldTypeTranslator = SetFieldTypeTranslator (|
|) (
public translateField: staticFieldName = (
	unimplemented.
)
public translateField: staticFieldName sig: sig = (
	| fieldID type |
	fieldID:: env GetStaticFieldID: (outer JavaClass asAlien) name: (help cstring: staticFieldName) sig: (help cstring: sig).
	(help isNullPtr: fieldID) ifTrue: [^StaticFieldNotFound].

	type:: returnType: sig.
	^[:value | invokeSetStaticTypeField: type fieldID: fieldID value: value ].
)
) : (
)
public call = (
	^callTranslator
)
public construct = (
	^constructTranslator
)
public get = (
	^getTranslator.
)
invokeCallStaticTypeMethod: returnType methodID: methodID args: args <Collection> = (
	^env CallStaticTypeMethod: returnType clazz: (self asAlien) methodID: methodID withArguments: args.
)
invokeGetStaticTypeField: returnType fieldID: fieldID = (
	^env GetStaticTypeField: returnType clazz: (self asAlien) fieldID: fieldID.
)
invokeSetStaticTypeField: returnType fieldID: fieldID value: value = (
	^env SetStaticTypeField: returnType clazz: (self asAlien) fieldID: fieldID value: value.
)
public set = (
	^setTranslator
)
) : (
public find: name <String> = (
	| jclass <Alien> |
	jclass:: env FindClass: (name asAlien address).
	^(help isNullPtr: jclass)
		ifTrue: [nil]
		ifFalse: [JavaClass on: jclass].
)
)
private class JavaObject on: jobject <Alien> = JavaAlien on: jobject (|
|) (
) : (
)
public class JavaPrimitive on: direct <Alien> = JavaAlien on: direct (|
|) (
) : (
public boolean: value <Boolean> = (
	| jboolean = Alien new: 1. integerValue |
	integerValue:: value ifTrue: [1] ifFalse: [0].
	jboolean unsignedByteAt: 1 put: integerValue.
	^self on: jboolean.
)
public byte: value <Integer> = (
	| jbyte = Alien new: 1. |
	jbyte signedByteAt: 1 put: value.
	^self on: jbyte.
)
public char: value <Character | Integer> = (
	| jchar = Alien new: 2. integerValue |
	integerValue:: value isCharacter ifTrue: [value asciiValue] ifFalse: [value].
	jchar unsignedShortAt: 1 put: integerValue.
	^self on: jchar
)
public double: value <Float> = (
	| jdouble = Alien new: 8. |
	jdouble doubleAt: 1 put: value.
	^self on: jdouble.
)
public float: value <Float> = (
	| jfloat = Alien new: 4. |
	jfloat floatAt: 1 put: value.
	^self on: jfloat.
)
public int: value <Integer>  = (
	| jint = Alien new: 4. |
	jint signedLongAt: 1 put: value.
	^self on: jint.
)
public long: value <Integer> = (
	| jlong = Alien new: 8. |
	jlong unsignedWordAt: 1 put: value.
	^self on: jlong.
)
public short: value <Integer> = (
	| jshort = Alien new: 2. |
	jshort signedShortAt: 1 put: value.
	^self on: jshort.
)
)
public class JavaString on: jstring <Alien> = JavaAlien on: jstring (|
|) (
public stringValue = (
	| cstring |
	cstring:: env GetStringUTFChars: (self asAlien) isCopy: (help nullPtr).
	^cstring strcpy.
)
) : (
public from: string <String> = (
	| jstring |
	jstring:: (env NewStringUTF: (help cstring: string)).
	^(jstring address = 0)
		ifTrue: [NewStringUTFFailed.]
		ifFalse: [JavaString on: jstring.]
)
)
) : (
)
protected class MethodTypeTranslator = TypeTranslator (|
|) (
public method: methodName = (
	^method: methodName args: (List new).
)
public method: staticMethodName arg: arg = (
	^method: staticMethodName args: (List with: arg).
)
public method: staticMethodName args: args = (
	| invocation nativeArgs |
	nativeArgs:: help coerceList: args.
	invocation:: translateMethod: staticMethodName args: nativeArgs.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value: nativeArgs]
)
public method: staticMethodName sig: sig = (
	^method: staticMethodName sig: sig args: (List new).
)
public method: staticMethodName sig: sig arg: arg = (
	^method: staticMethodName sig: sig args: (List with: arg)
)
public method: staticMethodName sig: sig args: args = (
	| invocation nativeArgs |
	nativeArgs:: help coerceList: args.
	invocation:: translateMethod: staticMethodName sig: sig.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value: nativeArgs]
)
public translateMethod: methodName numArgs: numArgs = (
	subclassResponsibility.
)
public translateMethod: methodName sig: sig = (
	subclassResponsibility
)
) : (
)
private class Runtime classpath: classpath = (
(* Encapsulates JVM and access to the classpath. Holds jvm and env pointers required for all interactions with Java. *)|
	public jvm	
	public env
	public running
	public preexisting 
|init: classpath) (
private createVM: classpath = (
	| options initArgs jvmPtrBuffer envPtrBuffer result success |

	options:: jni JavaVMOption newC.
	options optionString: (('-Djava.class.path=', classpath) asAlien address).
	
	initArgs:: jni JavaVMInitArgs newC.
	initArgs version: (jni VERSION_1_2).
	initArgs nOptions: 1.
	initArgs options: (options address).
	initArgs ignoreUnrecognized = (jni FALSE).

	(* 	envPtr is equivalent to JNIEnv* env;
		*env (i.e. the data pointed to by envPtr is itself the address of the JNINativeInterface struct	*)
	jvmPtrBuffer:: Alien newC: 4.
	envPtrBuffer:: Alien newC: 4.

	result:: jni CreateJavaVM: (jvmPtrBuffer address) p_env: (envPtrBuffer address) vm_args: (initArgs address).

	result = (jni OK)
	ifTrue: [
		jvm:: jni JavaVM withVmPtr: (derefPtrPtr: jvmPtrBuffer).
		env:: jni JNIEnv withEnvPtr: (derefPtrPtr: envPtrBuffer).
	].

	^result = (jni OK)
)
private derefPtrPtr: pointerPointerAlien = (
	^jni derefPtrPtr: pointerPointerAlien
)
private destroyVM = (
	^jvm DestroyJavaVM
)
public getClass: name = (
	| jclass |
	jclass:: env FindClass: (name asAlien address).
	^(help isNullPtr: jclass)
		ifTrue: [nil]
		ifFalse: [JavaClass on: jclass].
)
private init: classpath = (
	loadExistingVM ifTrue: [
		preexisting:: true. 
		running:: true
	] ifFalse: [
		preexisting:: false.
		(createVM: classpath) ifTrue: [
			running:: true
		] ifFalse: [
			running:: false.
			couldNotStartVM.
		]
	]
)
private loadEnvFromVM: jvmInst = (
	| envPtrBuffer result |
	envPtrBuffer:: Alien newC: 4.
	result:: Alien new: 4.

	result:: jvmInst GetEnv: (envPtrBuffer address) version: (jni VERSION_1_2).
	result = (jni OK) ifTrue: [env:: jni JNIEnv withEnvPtr: (derefPtrPtr: envPtrBuffer)].
	^result
)
private loadExistingVM = (
	| jvmPtrBuffer jvmInst nVMsBuffer numVMs result |
	jvmPtrBuffer:: Alien newC: 4.
	nVMsBuffer:: Alien newC: 4.
	
	result:: jni GetCreatedJavaVMs: (jvmPtrBuffer address) bufLen: 1 nVMs: (nVMsBuffer address).
	result = (jni OK) ifFalse: [^false].

	numVMs:: nVMsBuffer unsignedLongAt: 1.
	numVMs = 1 ifFalse: [^false]. (* Would always be 0 or 1 in modern JNI *)

	jvmInst:: jni JavaVM withVmPtr: (derefPtrPtr: jvmPtrBuffer).
	result:: loadEnvFromVM: jvmInst.
	result = (jni OK) ifTrue: [jvm:: jvmInst].
	
	^result = (jni OK)
)
private recreateVM = (
	(* 	THIS MAY NEVER WORK
		JDK-4712793 : JNI : Failure in JNI_CreateJavaVM() after calling DestroyJavaVM()
		http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4712793	*)
	| result |

	result:: loadExistingVM.
	result = (jni OK) ifFalse: [^false].

	result:: destroyVM.
	result = (jni OK) ifFalse: [^false].

	^createVM
)
) : (
)
class SetFieldTypeTranslator = TypeTranslator (|
|) (
public field: fieldName sig: sig to: value = (
	| invocation nativeValue |
	nativeValue:: help coerce: value.
	invocation:: translateField: fieldName sig: sig.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value: nativeValue]
)
public field: fieldName to: value = (
	| invocation nativeValue |
	nativeValue:: help coerce: value.
	invocation:: translateField: fieldName.
	^invocation isNil
		ifTrue: [super doesNotUnderstand]
		ifFalse: [invocation value: nativeValue]
)
public translateField: fieldName = (
	subclassResponsibility
)
public translateField: fieldName sig: sig = (
	^subclassResponsibility
)
) : (
)
class TypeTranslator = (|
|) (
protected dontPackage = (
	^[:input | input]
)
protected returnType: returnSignature = (
	(* Can/should we query JNI for the return type instead of examining the signature? *)

	returnSignature = 'V' ifTrue: [^env returnType void packager: dontPackage].
	(returnSignature at: 1) = "L" ifTrue: [^env returnType jobject packager: dontPackage].
	returnSignature = 'Z' ifTrue: [^env returnType jboolean packager: dontPackage].
	returnSignature = 'I' ifTrue: [^env returnType jint packager: dontPackage].
	returnSignature = 'D' ifTrue: [^env returnType jdouble packager: dontPackage].
	returnSignature = 'J' ifTrue: [^env returnType jlong packager: dontPackage].
	returnSignature = 'B' ifTrue: [^env returnType jbyte packager: dontPackage].
	returnSignature = 'F' ifTrue: [^env returnType jfloat packager: dontPackage].
	returnSignature = 'C' ifTrue: [^env returnType jchar packager: dontPackage].
	returnSignature = 'S' ifTrue: [^env returnType jshort packager: dontPackage].
	
	^nil
)
) : (
)
public JavaArray = (
	^javaAliens JavaArray
)
public JavaClass = (
	^javaAliens JavaClass
)
public JavaString = (
	^javaAliens JavaString
)
private defaultClasspath = (
	^'.'
)
public env = (
	^runtime env.
)
protected help = (
	^AlienHelpers
)
private javaAliens = (
	theJavaAliens isNil ifTrue: [loadRuntime: defaultClasspath].
	^theJavaAliens
)
public loadClasspath: classpath = (
	^loadClasspath: classpath ifAlreadyLoaded: [self]
)
public loadClasspath: classpath ifAlreadyLoaded: exec = (
	theRuntime isNil ifTrue: [
		loadRuntime: classpath.
		theRuntime preexisting ifTrue: [
			^exec value
		].
	] ifFalse: [
		^exec value.
	].
)
private loadRuntime: classpath = (
	| aRuntime |
	aRuntime:: Runtime classpath: classpath.
	aRuntime running ifFalse: [couldNotLoadRuntime].

	theRuntime:: aRuntime.
	theJavaAliens:: JavaAliens usingJNIEnv: (theRuntime env).
)
public runApplication: mainClassName = (
	| mainClass stringClass |
	(* For now this is passing an empty String array *)
	stringClass:: runtime getClass: 'java/lang/String'.
	^runApplication: mainClassName argsArray: (Array emptyOf: stringClass)
)
public runApplication: mainClassName  args: args <Collection> = (
	| stringClass argStringObjects |
	(* For now this is passing an empty String array *)
	stringClass:: runtime getClass: 'java/lang/String'.
	argStringObjects:: args collect: [:eachArg | JavaString from: eachArg].
	^runApplication: mainClassName argsArray: (JavaArray of: stringClass values: argStringObjects)
)
private runApplication: mainClassName argsArray: argsArray = (
	| mainClass |
	mainClass:: runtime getClass: mainClassName.
	mainClass call method: 'main' sig: '([Ljava/lang/String;)V' arg: argsArray.
)
private runtime = (
	theRuntime isNil ifTrue: [loadRuntime: defaultClasspath].
	^theRuntime.
)
) : (
)
