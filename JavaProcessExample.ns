Newspeak3
'JavaAliens'
class JavaProcessExample packageUsing: manifest = (|
	private JNI = manifest JNI.
	private JavaAliens = manifest JavaAliensForSqueak.
	private AppliedJava = manifest AppliedJava.

	java
	appJava
	panel

	Point
	JavaProcess
|) (
class Game state: state <JavaObject> = (|
	state = state.
|run) (
private bufferedImage = (
	^state get field: 'backbuffer' sig: 'Ljava/awt/image/BufferedImage;'.
)
private clearFlag: fieldName = (
	state set field: fieldName sig: 'Z' to: (java JavaPrimitive boolean: false).
)
private colorBlack = (
	| Color |
	Color:: (java JavaClass find: 'java/awt/Color').
	^Color construct new: {java JavaPrimitive int: 0. java JavaPrimitive int: 0. java JavaPrimitive int: 0} sig: '(III)V'.
)
private colorWhite = (
	| Color |
	Color:: (java JavaClass find: 'java/awt/Color').
	^Color construct new: {java JavaPrimitive int: 255. java JavaPrimitive int: 255. java JavaPrimitive int: 255} sig: '(III)V'.
)
private draw = (
	| g = graphics2D. mousePoint = mouse. |
	state call method: 'start' sig: '()V' args: {}.
	drawBackground: g color: [colorBlack].
	setColor: g color: [colorWhite].
	mousePoint ifNotNil: [drawLine: g from: (Point x: 0 y: 0) to: mousePoint].
	state call method: 'stop' sig: '()V' args: {}.
)
private drawBackground: g <JavaObject> color: color <BlockClosure> = (
	setColor: g color: color.
	g call method: 'fillRect' sig: '(IIII)V' args:
	{	java JavaPrimitive int: 0.
		java JavaPrimitive int: 0.
		java JavaPrimitive int: 800.
		java JavaPrimitive int: 600	}.
)
private drawLine: g from: from <Point> to: to <Point> = (
	g call method: 'drawLine' sig: '(IIII)V' args:
	{	java JavaPrimitive int: (from x).
		java JavaPrimitive int: (from y).
		java JavaPrimitive int: (to x).
		java JavaPrimitive int: (to y).	}.
)
private gameLoop = (
	| dirty |
	dirty:: false.

	(*(getFlag: 'step') ifTrue: [
		step.
		clearFlag: 'step'.
		dirty: true.
	].*)

	(getFlag: 'mouseMoved') ifTrue: [
		clearFlag: 'mouseMoved'.
		dirty: true.
	].

	dirty ifTrue: [startTimer. java synchronized: [draw] on: (bufferedImage). repaint. stopTimer.].

	(java JavaClass find: 'java/lang/Thread') call method: 'sleep' sig: '(J)V' args: {java JavaPrimitive long: 1}.

	^getFlag: 'finished'.
)
private getFlag: fieldName = (
	^(state get field: fieldName sig: 'Z') value.
)
private graphics2D = (
	| graphics |
	graphics:: bufferedImage call method: 'getGraphics' sig: '()Ljava/awt/Graphics;'.
	^graphics castTo: (java JavaClass find: 'java/awt/Graphics2D').
)
private mouse = (
	| mousePoint x y |
	mousePoint:: state get field: 'mousePoint' sig: 'Ljava/awt/Point;'.
	mousePoint isNull ifTrue: [^nil].

	x:: mousePoint get field: 'x' sig: 'I'.
	y:: mousePoint get field: 'y' sig: 'I'.
	^(Point x: (x value) y: (y value)).
)
private run = (
	| finished |
	finished: false.
	[finished:: gameLoop. (*Thread.yield()*)] doWhileTrue: [finished not].
)
private setColor: g color: color <BlockClosure> = (
	g call method: 'setColor' sig: '(Ljava/awt/Color;)V' args: {color value}.
)
private startTimer = (
	state call method: 'start' sig: '()V' args: {}.
)
private step = (
	
)
private stopTimer = (
	state call method: 'stop' sig: '()V' args: {}.
)
) : (
)
javaProcessTest = (
	| JavaProcessExample process |
	java loadClasspath: './bin'.
	JavaProcessExample:: java JavaClass find: 'JavaProcessExample'.
	process:: JavaProcess fork: JavaProcessExample arg: nil.
)
public main: platform args: args = (
	| jni state |

	jni:: JNI usingPlatform: platform.
	java:: JavaAliens usingPlatform: platform usingJNI: jni.
	appJava:: AppliedJava usingPlatform: platform usingJavaAliens: java.

	Point:: platform squeak Point.
	JavaProcess:: appJava JavaProcess.

	javaProcessTest.

	(*state:: (java JavaClass find: 'JavaGraphics') call method: 'makeWindow' sig: '()LJavaGraphics$AppState;'.*)
	(*java runApplication: 'JavaGraphics' args: {}.
	state:: (java JavaClass find: 'JavaGraphics') get field: 'state' sig: 'LJavaGraphics$AppState;'.
	panel:: state get field: 'panel' sig: 'LJavaGraphics;'.
	Game state: state.*)
)
public repaint = (
	panel call method: 'repaint' sig: '()V'.
)
) : (
)
