Newspeak3
'JavaAliens'
class JNI usingPlatform: platform = (
(*Bindings for Java Native Interface via Aliens FFI *)|
	Alien = platform aliens Alien.
	Map = platform collections Map.
	private definitions = Definitions new.
	private structures = Structures new.
	private libraries = Libraries new.
|) (
private class Definitions = (||) (
public ABORT = (
	^2
)
public COMMIT = (
	^1
)
public EDETACHED = (
	(* thread detached from the VM *)
	^-2
)
public EEXIST = (
	(* VM already created *)
	^-5
)
public EINVAL = (
	(* invalid arguments *)
	^-6
)
public ENOMEM = (
	(* not enough memory *)
	^-4
)
public ERR = (
	(* unknown error *)
	^-1
)
public EVERSION = (
	(* JNI version error *)
	^-3
)
public FALSE = (
	^0
)
public OK = (
	(* success *)
	^0
)
public TRUE = (
	^1
)
public VERSION_1_1 = (
	^65537 (*0x00010001*)
)
public VERSION_1_2 = (
	^65538 (*0x00010002*)
)
public VERSION_1_4 = (
	^65540 (*0x00010004*)
)
public VERSION_1_6 = (
	^65542 (*0x00010006*)
)
public VERSION_1_8 = (
	^65544 (*0x00010008*)
)
) : (
)
public class Generator usingPlatform: platform usingRegex: regex = (
(* No longer used *)|
ObjectMirror = platform mirrors ObjectMirror.
Transcript = platform squeak Transcript.
private regex = regex.
private builder
private methods
|) (
builderFor: aClass = (
	^(ObjectMirror reflecting: aClass) getClass mixin declaration asBuilder.
)
public deflate: inflatableClass = (
	builder:: builderFor: inflatableClass.
	methods:: builder instanceSide methods.
	
	publicMethods do: [:eachPublicMethod | methods removeMirrorNamed: (eachPublicMethod name)].

	install.
)
public inflate: inflatableClass = (
	| from to |
	builder:: builderFor: inflatableClass.
	methods:: builder instanceSide methods.
	
	from:: inflatableClass inflationSpecFrom.
	to:: inflatableClass inflationSpecTo.
	to do: [:eachTo | inflateMethodsFrom: from to: eachTo].

	install.
)
inflateMethodsFrom: from to: to= (
	| replaced |
	privateMethods do: [:eachPrivateMethod |
		replaced:: replacedSource: (eachPrivateMethod source) from: from to: to.
		methods addFromSource: replaced.
	].
)
install = (
	builder install.
)
privateMethods = (
	^methods select: [:eachMethod | eachMethod accessModifier = #private].
)
publicMethods = (
	^methods select: [:eachMethod | eachMethod accessModifier = #public].
)
replacedSource: source from: from to: to = (
	| replacedSource rx repl i |
	replacedSource:: source.
	i:: 1.
	[i <= (from size)] whileTrue: [
		rx:: from at: i.
		repl:: to at: i.
		replacedSource:: regex string: replacedSource copyWithRegex: rx matchesReplacedWith: repl.
		i:: (i + 1).
	].
	^replacedSource
)
) : (
)
private class Libraries = (|
|) (
public class JNIEnv withEnvPtr: envPointerAlien = (
(* Encapsulates standard env methods. Function table provided by struct JNINativeInterface. *)|
	env = envPointerAlien.
	api = struct FunctionTable on: (derefPtrPtr: envPointerAlien).
|) (
public class ReturnType resultBuilder: resultBuilder tablePosition: tablePosition = (|
	resultBuilder = resultBuilder.
	public tablePosition = tablePosition.
|) (
public result: primFFIBlock = (
	^resultBuilder value: primFFIBlock.
)
) : (
public jboolean = (
	| resultBuilder tablePosition = 2. |
	resultBuilder:: [:primFFIBlock | byteResult: primFFIBlock].

	^self resultBuilder: resultBuilder tablePosition: tablePosition.
)
public jbyte = (
	| resultBuilder tablePosition = 3. |
	resultBuilder:: [:primFFIBlock | byteResult: primFFIBlock].
	
	^self resultBuilder: resultBuilder tablePosition: tablePosition.
)
public jchar = (
	| resultBuilder tablePosition = 4. |
	resultBuilder:: [:primFFIBlock | shortResult: primFFIBlock].

	^self resultBuilder: resultBuilder tablePosition: tablePosition.
)
public jdouble = (
	| resultBuilder tablePosition = 9. |
	resultBuilder:: [:primFFIBlock | doubleResult: primFFIBlock].
	
	^self resultBuilder: resultBuilder tablePosition: tablePosition.
)
public jfloat = (
	| resultBuilder tablePosition = 8. |
	resultBuilder:: [:primFFIBlock | floatResult: primFFIBlock].
	
	^self resultBuilder: resultBuilder tablePosition: tablePosition.
)
public jint = (
	| resultBuilder tablePosition = 6. |
	resultBuilder:: [:primFFIBlock | longResult: primFFIBlock].

	^self resultBuilder: resultBuilder tablePosition: tablePosition.
)
public jlong = (
	| resultBuilder tablePosition = 7. |
	resultBuilder:: [:primFFIBlock | wordResult: primFFIBlock].

	^self resultBuilder: resultBuilder tablePosition: tablePosition.
)
public jobject = (
	| resultBuilder tablePosition = 1. |
	resultBuilder:: [:primFFIBlock | pointerResult: primFFIBlock].

	^self resultBuilder: resultBuilder tablePosition: tablePosition.
)
public jshort = (
	| resultBuilder tablePosition = 5. |
	resultBuilder:: [:primFFIBlock | shortResult: primFFIBlock].
	
	^self resultBuilder: resultBuilder tablePosition: tablePosition.
)
public void = (
	| resultBuilder tablePosition = 10. |
	resultBuilder:: [:primFFIBlock | voidResult: primFFIBlock].

	^self resultBuilder: resultBuilder tablePosition: tablePosition.
)
)
public CallStaticTypeMethod: returnType clazz: clazz methodID: methodID withArguments: varArgs = (
	(*	NativeType CallStatic<type>Method(JNIEnv *env, jclass clazz, jmethodID methodID, ...);

		This family of operations invokes a static method on a Java object, according to the specified method ID. The methodID argument must be obtained by calling GetStaticMethodID().

		The method ID must be derived from clazz, not from one of its superclasses.	*)

	| index apiCall arguments |

	index:: 114 + (((returnType tablePosition) - 1) * 3).
	apiCall:: api methodAtIndex: index.

	arguments:: {env. clazz. methodID}, varArgs.

	^returnType result: [:result | apiCall primFFICallResult: result withArguments: arguments].
)
public CallTypeMethod: returnType obj: obj methodID: methodID withArguments: varArgs = (
	(*	NativeType Call<type>Method(JNIEnv *env, jobject obj, jmethodID methodID, ...);

		Methods from these three families of operations are used to call a Java instance method from a native method.They only differ in their mechanism for passing parameters to the methods that they call.

		These families of operations invoke an instance (nonstatic) method on a Java object, according to the specified method ID. The methodID argument must be obtained by calling GetMethodID().

		When these functions are used to call private methods and constructors, the method ID must be derived from the real class of obj, not from one of its superclasses.	*)

	| index apiCall arguments |

	index:: 34 + (((returnType tablePosition) - 1) * 3).
	apiCall:: api methodAtIndex: index.
	
	arguments:: {env. obj. methodID}, varArgs.
	
	^returnType result: [:result | apiCall primFFICallResult: result withArguments: arguments].
)
public FindClass: name  = (
	(*	jclass FindClass(JNIEnv *env, const char *name);

		In JDK release 1.1, this function loads a locally-defined class. It searches the directories and zip files specified by the CLASSPATH environment variable for the class with the specified name.

		Since Java 2 SDK release 1.2, the Java security model allows non-system classes to load and call native methods. FindClass locates the class loader associated with the current native method; that is, the class loader of the class that declared the native method. If the native method belongs to a system class, no class loader will be involved. Otherwise, the proper class loader will be invoked to load and link the named class.

		Since Java 2 SDK release 1.2, when FindClass is called through the Invocation Interface, there is no current native method or its associated class loader. In that case, the result of ClassLoader.getSystemClassLoader is used. This is the class loader the virtual machine creates for applications, and is able to locate classes listed in the java.class.path property.

		The name argument is a fully-qualified class name or an array type signature . For example, the fully-qualified class name for the java.lang.String class is:

		"java/lang/String"

		The array type signature of the array class java.lang.Object[] is:

		"[Ljava/lang/Object;"		*)

	| apiCall = api methodAtIndex: 6. |
	^pointerResult: [:result | apiCall primFFICallResult: result with: env with: name].
)
public GetArrayLength: jarray = (
	(*	jsize GetArrayLength(JNIEnv *env, jarray array);

		Returns the number of elements in the array.	*)

	| apiCall = api methodAtIndex: 171. |
	^longResult: [:result | apiCall primFFICallResult: result with: env with: jarray].
)
public GetFieldID: clazz name: name sig: sig = (
	(*	jfieldID GetFieldID(JNIEnv *env, jclass clazz, const char *name, const char *sig);

		Returns the field ID for an instance (nonstatic) field of a class. The field is specified by its name and signature. The Get<type>Field and Set<type>Field families of accessor functions use field IDs to retrieve object fields.

		GetFieldID() causes an uninitialized class to be initialized.

		GetFieldID() cannot be used to obtain the length field of an array. Use GetArrayLength() instead.	*)

	| apiCall = api methodAtIndex: 94. |
	^pointerResult: [:result | apiCall primFFICallResult: result with: env with: clazz with: name with: sig].
)
public GetMethodID: clazz name: name sig: sig = (
	(*	jmethodID GetMethodID(JNIEnv *env, jclass clazz, const char *name, const char *sig);

		Returns the method ID for an instance (nonstatic) method of a class or interface. The method may be defined in one of the clazz's superclasses and inherited by clazz. The method is determined by its name and signature.

		GetMethodID() causes an uninitialized class to be initialized.

		To obtain the method ID of a constructor, supply <init> as the method name and void (V) as the return type.	*)

	| apiCall = api methodAtIndex: 33. |
	^pointerResult: [:result | apiCall primFFICallResult: result with: env with: clazz with: name with: sig].
)
public GetObjectArrayElement: array index: index = (
	(*	jobject GetObjectArrayElement(JNIEnv *env, jobjectArray array, jsize index);

		Returns an element of an Object array.	*)

	| apiCall = api methodAtIndex: 173. |
	^pointerResult: [:result | apiCall primFFICallResult: result with: env with: array with: index].
)
public GetObjectClass: obj = (
	(*	jclass GetObjectClass(JNIEnv *env, jobject obj);

		Returns the class of an object.	*)

	| apiCall = api methodAtIndex: 31. |
	^pointerResult: [:result | apiCall primFFICallResult: result with: env with: obj].
)
public GetStaticFieldID: clazz name: name sig: sig = (
	(*	jfieldID GetStaticFieldID(JNIEnv *env, jclass clazz, const char *name, const char *sig);

		Returns the field ID for a static field of a class. The field is specified by its name and signature. The GetStatic<type>Field and SetStatic<type>Field families of accessor functions use field IDs to retrieve static fields.

		GetStaticFieldID() causes an uninitialized class to be initialized.	*)

	| apiCall = api methodAtIndex: 144. |
	^pointerResult: [:result | apiCall primFFICallResult: result with: env with: clazz with: name with: sig].
)
public GetStaticMethodID: clazz name: name sig: sig = (
	(*	jmethodID GetStaticMethodID(JNIEnv *env, jclass clazz,
		const char *name, const char *sig);

		Returns the method ID for a static method of a class. The method is specified by its name and signature.

		GetStaticMethodID() causes an uninitialized class to be initialized.	*)

	| apiCall = api methodAtIndex: 113. |
	^pointerResult: [:result | apiCall primFFICallResult: result with: env with: clazz with: name with: sig].
)
public GetStaticTypeField: returnType clazz: clazz fieldID: fieldID = (
	(*	NativeType GetStatic<type>Field(JNIEnv *env, jclass clazz, jfieldID fieldID);

		This family of accessor routines returns the value of a static field of an object. The field to access is specified by a field ID, which is obtained by calling GetStaticFieldID().		*)

	| index apiCall |

	index:: 145 + (returnType tablePosition) - 1.
	apiCall:: api methodAtIndex: index.

	^returnType result: [:result | apiCall primFFICallResult: result with: env with: clazz with: fieldID].
)
public GetStringUTFChars: string isCopy: isCopy = (
	(*	const char * GetStringUTFChars(JNIEnv *env, jstring string,
		jboolean *isCopy);

		Returns a pointer to an array of bytes representing the string in modified UTF-8 encoding. This array is valid until it is released by 			ReleaseStringUTFChars().

		If isCopy is not NULL, then *isCopy is set to JNI_TRUE if a copy is made; or it is set to JNI_FALSE if no copy is made.	*)

	| apiCall = api methodAtIndex: 169. |
	^pointerResult: [:result | apiCall primFFICallResult: result with: env with: string with: isCopy].
)
public GetTypeField: returnType obj: obj fieldID: fieldID = (
	(*	NativeType Get<type>Field(JNIEnv *env, jobject obj, jfieldID fieldID);

		This family of accessor routines returns the value of an instance (nonstatic) field of an object. The field to access is specified by a field ID obtained by calling GetFieldID().

		The following table describes the Get<type>Field routine name and result type. You should replace type in Get<type>Field with the Java type of the field, or use one of the actual routine names from the table, and replace NativeType with the corresponding native type for that routine.	*)

	| index apiCall |
	
	index:: 95 + (returnType tablePosition) - 1.
	apiCall:: api methodAtIndex: index.

	^returnType result: [:result | apiCall primFFICallResult: result with: env with: obj with: fieldID].
)
public IsInstanceOf: obj clazz: clazz = (
	(*	jboolean IsInstanceOf(JNIEnv *env, jobject obj, jclass clazz);

		Tests whether an object is an instance of a class.	*)
	
	| apiCall = api methodAtIndex: 32. |
	^byteResult: [:result | apiCall primFFICallResult: result with: env with: obj with: clazz].
)
public MonitorEnter: obj = (
	(*	jint MonitorEnter(JNIEnv *env, jobject obj);

		Enters the monitor associated with the underlying Java object referred to by obj.

		Enters the monitor associated with the object referred to by obj. The obj reference must not be NULL.
		Each Java object has a monitor associated with it. If the current thread already owns the monitor associated with obj, it increments a counter in the monitor indicating the number of times this thread has entered the monitor. If the monitor associated with obj is not owned by any thread, the current thread becomes the owner of the monitor, setting the entry count of this monitor to 1. If another thread already owns the monitor associated with obj, the current thread waits until the monitor is released, then tries again to gain ownership.

		A monitor entered through a MonitorEnter JNI function call cannot be exited using the monitorexit Java virtual machine instruction or a synchronized method return. A MonitorEnter JNI function call and a monitorenter Java virtual machine instruction may race to enter the monitor associated with the same object.

		To avoid deadlocks, a monitor entered through a MonitorEnter JNI function call must be exited using the MonitorExit JNI call, unless the DetachCurrentThread call is used to implicitly release JNI monitors.	*)

	| apiCall = api methodAtIndex: 217. |
	^longResult: [:result | apiCall primFFICallResult: result with: env with: obj].
)
public MonitorExit: obj= (
	(*	jint MonitorExit(JNIEnv *env, jobject obj);

		The current thread must be the owner of the monitor associated with the underlying Java object referred to by obj. The thread decrements the counter indicating the number of times it has entered this monitor. If the value of the counter becomes zero, the current thread releases the monitor.

		Native code must not use MonitorExit to exit a monitor entered through a synchronized method or a monitorenter Java virtual machine instruction.	*)

	| apiCall = api methodAtIndex: 218. |
	^longResult: [:result | apiCall primFFICallResult: result with: env with: obj].
)
public NewObject: clazz methodID: methodID withArguments: varArgs = (
	(*	jobject NewObject(JNIEnv *env, jclass clazz, jmethodID methodID, ...);

		Constructs a new Java object. The method ID indicates which constructor method to invoke. This ID must be obtained by calling GetMethodID() with <init> as the method name and void (V) as the return type.

		The clazz argument must not refer to an array class.	*)

	| apiCall = api methodAtIndex: 28. arguments |

	arguments:: {env. clazz. methodID}, varArgs.

	^pointerResult: [:result | apiCall primFFICallResult: result withArguments: arguments].
)
public NewObjectArray: length elementClass: elementClass initialElement: initialElement = (
	(*	jobjectArray NewObjectArray(JNIEnv *env, jsize length,
		jclass elementClass, jobject initialElement);

		Constructs a new array holding objects in class elementClass. All elements are initially set to initialElement.	*)

	| apiCall = api methodAtIndex: 172. |
	^pointerResult: [:result | apiCall primFFICallResult: result
		with: env with: length with: elementClass with: initialElement].
)
public NewStringUTF: bytes = (
	(*	jstring NewStringUTF(JNIEnv *env, const char *bytes);

		Constructs a new java.lang.String object from an array of characters in modified UTF-8 encoding.	*)

	| apiCall = api methodAtIndex: 167. |
	^pointerResult: [:result | apiCall primFFICallResult: result with: env with: bytes].
)
public SetObjectArrayElement: array index: index value: value = (
	(*	void SetObjectArrayElement(JNIEnv *env, jobjectArray array,
		jsize index, jobject value);

		Sets an element of an Object array.	*)

	| apiCall = api methodAtIndex: 174. |
	^voidResult: [:result | apiCall primFFICallResult: result with: env with: array with: index with: value].
)
public SetStaticTypeField: returnType clazz: clazz fieldID: fieldID value: value = (
	(*	void SetStatic<type>Field(JNIEnv *env, jclass clazz, jfieldID fieldID, NativeType value);

		This family of accessor routines sets the value of a static field of an object. The field to access is specified by a field ID, which is obtained by calling GetStaticFieldID().

		The following table describes the set routine name and value types. You should replace type in SetStatic<type>Field with the Java type of the field, or one of the actual set static field routine names from the table, and replace NativeType with the corresponding native type for that routine.	*)
	
	| index apiCall |

	index:: 154 + (returnType tablePosition) - 1.
	apiCall:: api methodAtIndex: index.

	^returnType result: [:result | apiCall primFFICallResult: result with: env with: clazz with: fieldID with: value].
)
public SetTypeField: returnType obj: obj fieldID: fieldID value: value = (
	(*	void Set<type>Field(JNIEnv *env, jobject obj, jfieldID fieldID, NativeType value);

		This family of accessor routines sets the value of an instance (nonstatic) field of an object. The field to access is specified by a field ID obtained by calling GetFieldID().

		The following table describes the Set<type>Field routine name and value type. You should replace type in Set<type>Field with the Java type of the field, or use one of the actual routine names from the table, and replace NativeType with the corresponding native type for that routine.	*)

	| index apiCall |

	index:: 104 + (returnType tablePosition) - 1.
	apiCall:: api methodAtIndex: index.

	^returnType result: [:result | apiCall primFFICallResult: result with: env with: obj with: fieldID with: value].
)
) : (
)
public class JavaVM withVmPtr: vmPointerAlien = (
(* Encapsulates standard vm methods. Function table provided by struct JNIInvokeInterface. *)|
	vm = vmPointerAlien.
	api = struct FunctionTable on: (derefPtrPtr: vmPointerAlien).
|) (
public DestroyJavaVM = (
	(*	jint DestroyJavaVM(JavaVM *vm);

	Unloads a Java VM and reclaims its resources.

	The support for DestroyJavaVM was not complete in JDK/JRE 1.1. As of JDK/JRE 1.1 Only the main thread may call DestroyJavaVM. Since JDK/JRE 1.2, any thread, whether attached or not, can call this function. If the current thread is attached, the VM waits until the current thread is the only non-daemon user-level Java thread. If the current thread is not attached, the VM attaches the current thread and then waits until the current thread is the only non-daemon user-level thread. The JDK/JRE still does not support VM unloading, however.	*)

	| apiCall = api methodAtIndex: 3. result = Alien new: 4. |
	apiCall primFFICallResult: result with: vm.
	^result signedLongAt: 1
)
public GetEnv: env version: version = (
	(* 	jint GetEnv(JavaVM *vm, void **env, jint version);
		
		If the current thread is not attached to the VM, sets *env to NULL, and returns JNI_EDETACHED. If the specified version is not supported, sets *env to NULL, and returns JNI_EVERSION. Otherwise, sets *env to the appropriate interface, and returns JNI_OK.	*)

	| apiCall = api methodAtIndex: 6. result = Alien new: 4. |
	apiCall primFFICallResult: result with: vm with: env with: version.
	^result signedLongAt: 1
)
) : (
)
public byteResult: primFFIBlock = (
	| result = Alien new: 1. |
	primFFIBlock value: result.
	^result.
)
public derefPtrPtr: pointerPointerAlien = (
	(* pointerPointerAlien points to a value "A". Return a pointer to the value at address "A". *)
	| pointerAlien |
	pointerAlien:: Alien forPointer: (pointerPointerAlien unsignedLongAt: 1).
	^pointerAlien
)
public doubleResult: primFFIBlock = (
	| result = Alien new: 8. |
	primFFIBlock value: result.
	^result.
)
public floatResult: primFFIBlock = (
	| result = Alien new: 4. |
	primFFIBlock value: result.
	^result.
)
public longResult: primFFIBlock = (
	| result = Alien new: 4. |
	primFFIBlock value: result.
	^result.
)
public pointerResult: primFFIBlock = (
	| result = Alien new: 4. |
	primFFIBlock value: result.
	^Alien forPointer: (result unsignedLongAt: 1).
)
public shortResult: primFFIBlock = (
	| result = Alien new: 2. |
	primFFIBlock value: result.
	^result.
)
public voidResult: primFFIBlock = (
	primFFIBlock value: nil.
)
public wordResult: primFFIBlock = (
	| result = Alien new: 8. |
	primFFIBlock value: result.
	^result.
)
) : (
)
private class Structures = (||) (
public class FunctionTable on: anAlien = Struct on: anAlien (||) (
public methodAtIndex: index = (
	| location = ((index * 4) + 1). |
	^Alien forPointer: (data unsignedLongAt: location)
)
) : (
)
public class JavaVMInitArgs on: anAlien = Struct on: anAlien (
(*	typedef struct JavaVMInitArgs {
		jint version;
		jint nOptions;
    		JavaVMOption *options;
    		jboolean ignoreUnrecognized;
} JavaVMInitArgs;	*)||) (
public ignoreUnrecognized = ( ^data unsignedByteAt: 13 )
public ignoreUnrecognized: byte = ( data unsignedByteAt: 13 put: byte )
public nOptions = ( ^data signedLongAt: 5. )
public nOptions: integer = ( data signedLongAt: 5 put: integer )
public options = ( ^Alien forPointer: (data unsignedLongAt: 9) )
public options: pointerOrAddress = ( data unsignedLongAt: 9 put: pointerOrAddress )
public version = ( ^data signedLongAt: 1 )
public version: integer = ( data signedLongAt: 1 put: integer )
) : (
dataSize = (
	^13.
)
public newC = (
	^self on: (Alien newC: dataSize)
)
)
public class JavaVMOption on: anAlien = Struct on: anAlien (
(*	typedef struct JavaVMOption {
	char *optionString;
    	void *extraInfo;
	} JavaVMOption;	*)||) (
public extraInfo = ( ^Alien forPointer: (data unsignedLongAt: 5) )
public extraInfo: addressOrPointer = ( data unsignedLongAt: 5 put: addressOrPointer )
public optionString = ( ^Alien forPointer: (data unsignedLongAt: 1) )
public optionString: addressOrPointer = ( data unsignedLongAt: 1 put: addressOrPointer )
) : (
dataSize = (
	^8
)
public newC = (
	^self on: (Alien newC: (self dataSize))
)
)
class Struct on: anAlien = (
(* Normally, each struct should extend Alien, but NS does not (yet?) support variable-byte classes. *)|
	data = anAlien.
|) (
dataSize = (
	subclassResponsibility
)
public doesNotUnderstand: message = (
	^message sendTo: data
)
) : (
)
) : (
)
public CreateJavaVM: p_vm p_env: p_env vm_args: vm_args = (
	(*	jint JNI_CreateJavaVM(JavaVM **p_vm, void **p_env, void *vm_args);
		
		Loads and initializes a Java VM. The current thread becomes the main thread. Sets the env argument to the JNI interface pointer of the main thread.	*)

	| result |
	result:: Alien new: 4.
	(Alien lookup: 'JNI_CreateJavaVM' inLibrary: 'jvm.dll') primFFICallResult: result with: p_vm with: p_env with: vm_args.
	^result signedLongAt: 1
)
public GetCreatedJavaVMs: vmBuf bufLen: bufLen nVMs: nVMs = (
	(*	jint JNI_GetCreatedJavaVMs(JavaVM **vmBuf, jsize bufLen, jsize *nVMs);
		
		Returns all Java VMs that have been created. Pointers to VMs are written in the buffer vmBuf in the order they are created. At most bufLen number of entries will be written. The total number of created VMs is returned in *nVMs.

		As of JDK/JRE 1.2, creation of multiple VMs in a single process is not supported.	*)

	| result = Alien new: 4. |
	(Alien lookup: 'JNI_GetCreatedJavaVMs' inLibrary: 'jvm.dll')
		primFFICallResult: result
		with: vmBuf with: bufLen with: nVMs.
	^result signedLongAt: 1
)
public const = (
	^definitions
)
public doesNotUnderstand: message = (
	(definitions respondsTo: (message selector)) ifTrue: [
		^message sendTo: definitions	
	].
	(structures respondsTo: (message selector)) ifTrue: [
		^message sendTo: structures
	].
	(libraries respondsTo: (message selector)) ifTrue: [
		^message sendTo: libraries
	].
	^super doesNotUnderstand: message
)
public lib = (
	^libraries
)
public struct = (
	^structures
)
) : (
)
